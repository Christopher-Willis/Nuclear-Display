{"version":3,"sources":["components/NuclideDisplay.js","components/PeriodicTableGrid.js","containers/PeriodicTableGridContainer.js","App.js","containers/AppContainer.js","actions/index.js","serviceWorker.js","reducers/index.js","store.js","index.js"],"names":["NuclideDisplay","props","react_default","a","createElement","Card_default","CardHeader_default","avatar","Avatar_default","aria-label","data","symbol","title","name","subheader","summary","ReactGridLayout","WidthProvider","RGL","MyFirstGrid","className","cols","rowHeight","autoSize","this","allElements","map","element","index","key","data-grid","x","xpos","y","ypos","w","h","static","React","Component","connect","state","elements","PeriodicTable","App","_this","fetch","urlIsotopes","then","response","json","nuclideObject","addNuclde","urlElements","elementObject","addElement","allNuclides","length","components_NuclideDisplay","PeriodicTableGridContainer","mapDispatchToProps","nuclides","type","value","concat","process","Boolean","window","location","hostname","match","reducers","combineReducers","arguments","undefined","action","Object","toConsumableArray","store","createStore","ReactDOM","render","es","AppContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7d7ab0a.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\n\n\nfunction NuclideDisplay(props) {\n  return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"Isotope Abbreviation\">\n            {props.data.symbol}\n          </Avatar>\n        }\n        title={props.data.name}\n        subheader={props.data.summary}\n      />\n    </Card>\n    \n  );\n}\nexport default NuclideDisplay;","import React from 'react';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\n\n\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nclass MyFirstGrid extends React.Component {\n  render() {\n    // layout is an array of objects, see the demo for more complete usage\n\n    return (\n      <ReactGridLayout className=\"layout\" cols={18} rowHeight={45} autoSize={true} >\n        {this.props.allElements.map((element,index)=>{\n          return <div key={index} data-grid={{x: element.xpos-1, y: element.ypos-1, w: 1, h: 1, static: true}}>{element.symbol}</div>\n        })}\n      </ReactGridLayout>\n    )\n  }\n}\n\nexport default MyFirstGrid","import PeriodicTable from \"../components/PeriodicTableGrid.js\"\nimport { connect } from 'react-redux';\n\n\n\n\nfunction mapStateToProps(state){\n  return {\n    allElements:state.elements\n  }\n}\n\n\nexport default connect(mapStateToProps)(PeriodicTable);","import React, { Component } from 'react';\nimport NuclideDisplay from \"./components/NuclideDisplay\"\nimport './App.css';\nimport PeriodicTable from \"./containers/PeriodicTableGridContainer\"\n\n\n  \n\nclass App extends Component {\n\n  componentDidMount(){\n  fetch(this.props.urlIsotopes)\n    .then((response) =>{\n      return response.json();\n    })\n    .then((nuclideObject) =>{\n      this.props.addNuclde(nuclideObject)\n  });\n  // load all nuclear isotope data to redux\n\n  fetch(this.props.urlElements)\n  .then((response) =>{\n    return response.json();\n  })\n  .then((elementObject) =>{\n    this.props.addElement(elementObject)\n  });\n\n  // loads all element data to redux\n\n  }\n  \n\n  render() {\n    let display =\"\";\n    if(this.props.allNuclides && this.props.allElements<100){\n      display=<div>Loading: {this.props.allElements.length} of 1481</div>\n    }else if (this.props.allNuclides){\n      display=<div className=\"isotope-grid\">{this.props.allElements.map((element,index)=>{\n        return <div className=\"isotope-container\"  key={index}><NuclideDisplay data={element}/></div>\n        })}\n      </div>\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          header\n        </header>\n        <PeriodicTable/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","import App from \"../App.js\"\nimport { connect } from 'react-redux';\nimport {addNuclides,addElements} from \"../actions\"\n\n\n\nconst mapDispatchToProps = {\n  addNuclde:addNuclides,\n  addElement:addElements\n}\n\nfunction mapStateToProps(state){\n  return {\n    urlIsotopes:`${process.env.REACT_APP_API_URL}/isotopes`,\n    urlElements:`${process.env.REACT_APP_API_URL}/elements`,\n    allNuclides:state.nuclides,\n    allElements:state.elements\n  }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","export function addNuclides(nuclides){\n  return {\n    type:\"ADD_NUCLIDES\",\n    value:nuclides\n  }\n}\n\nexport function addElements(elements){\n  return {\n    type:\"ADD_ELEMENTS\",\n    value:elements\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\n\nfunction nuclides(state=[], action){\n  if(action.type === \"ADD_NUCLIDES\"){\n    return [...state,...action.value]\n  }\n  return state;\n}   \n\nfunction elements(state=[], action){\n  if(action.type === \"ADD_ELEMENTS\"){\n    return [...state,...action.value]\n  }\n  return state;\n}   \n\n\nconst reducers = combineReducers({\n  nuclides,elements\n})\n\nexport default reducers;","import {createStore} from 'redux';\nimport reducers from \"./reducers\";\n\nconst state = {}\n\nvar store = createStore(reducers,state);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/AppContainer';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\"\n\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}